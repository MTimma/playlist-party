rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Lobby rules
    match /lobbies/{lobbyId} {
      // Anyone authenticated can read lobbies
      allow read: if request.auth != null;
      
      // Anyone authenticated can create a lobby
      allow create: if request.auth != null;
      
      // Players can update their own ready status, join lobby, or host can update lobby status
      allow update: if request.auth != null && (
        // Player updating their own added songs status
        (request.auth.uid in resource.data.players.keys() &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['players']) &&
         request.resource.data.players[request.auth.uid].diff(resource.data.players[request.auth.uid]).affectedKeys().hasOnly(['hasAddedSongs'])) ||
        // Player updating their own ready status
        (request.auth.uid in resource.data.players.keys() &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['players']) &&
         request.resource.data.players[request.auth.uid].diff(resource.data.players[request.auth.uid]).affectedKeys().hasOnly(['isReady'])) ||
        // New player joining the lobby (adding themselves to players)
        (!(request.auth.uid in resource.data.players.keys()) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['players']) &&
         request.auth.uid in request.resource.data.players.keys()) ||
        // Host updating lobby (status changes, playlist info)
        (request.auth.uid == resource.data.hostFirebaseUid)
      );
      
      // Only the host can delete the lobby
      allow delete: if request.auth != null
        && request.auth.uid == resource.data.hostFirebaseUid;
    }
    
    // Track proposals rules
    match /lobbies/{lobbyId}/proposals/{trackUri} {
      // Only players in the lobby can read proposals
      allow read: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys());
      
      // Only players in the lobby can create proposals for themselves
      allow create: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys())
        && request.auth.uid == request.resource.data.proposedBy;
      
      // Only host or Cloud Functions can update proposals (approve/reject)
      allow update: if request.auth != null && (
        request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid
      );
      
      // Only host can delete proposals
      allow delete: if request.auth != null
        && request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid;
    }
    
    // Playlist collection rules
    match /playlists/{lobbyId} {
      // Only players in the corresponding lobby can read
      allow read: if request.auth != null
        && (
             // game is still active
             (exists(/databases/$(database)/documents/lobbies/$(lobbyId))
              && request.auth.uid in
                 get(/databases/$(database)/documents/lobbies/$(lobbyId))
                     .data.players.keys())
             ||
             // or the game just finished and a game-result exists
             exists(/databases/$(database)/documents/game_results/$(lobbyId))
           );
      
      // Only the host can create the playlist document
      allow create: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid;
      
      // Only players in the lobby can update (add songs)
      allow update: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys());
    }
    
    // User tokens (for storing Spotify refresh tokens)
    match /user_tokens/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Game state rules (legacy)
    match /games/{gameId} {
      allow read, write: if request.auth != null;
    }
    
    // NEW - Game state management rules (Phase 4)
    match /games/{lobbyId}/state/{stateId} {
      // All players in the lobby can read game state
      allow read: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys());
      
      // Only the host can create initial game state
      allow create: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid;
      
      // Host can update game state (track changes, round progression)
      // Cloud Functions should handle most updates in production
      allow update: if request.auth != null && (
        request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid
      );
    }
    
    // Player scores rules
    match /games/{lobbyId}/scores/{playerId} {
      // All players in the lobby can read scores
      allow read: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys());
      
      // Host can create initial score documents
      allow create: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid;
      
      // Cloud Functions should handle score updates in production
      // For development, allow host to update scores
      allow update: if request.auth != null 
        && request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostFirebaseUid;
    }
    
    // Guess submission rules
    match /games/{lobbyId}/guesses/{guessId} {
      // All players in the lobby can read guesses (for real-time updates)
      allow read: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys());
      
      // Only the authenticated guesser can create their own guess
      allow create: if request.auth != null 
        && exists(/databases/$(database)/documents/lobbies/$(lobbyId))
        && (request.auth.uid in get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.players.keys())
        && request.auth.uid == request.resource.data.playerId;
      
      // Cloud Functions should handle guess validation and scoring
      // No direct updates allowed from clients
    }

    // === Game results (final scoreboard) ===
    match /game_results/{lobbyId} {
      // Any authenticated user can read a finished game's results so that
      // all former players may display the final scoreboard even after the
      // lobby document has been deleted.
      allow read: if request.auth != null;
      // Clients must never write to this collection â€“ only the trusted backend
      // (using the Admin SDK) may create documents.
      allow write: if false;
    }
  }
} 